// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CashrewardsOffers.Application.AcceptanceTests.Features.Anz
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("AnzDelta")]
    public partial class AnzDeltaFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "AnzDelta.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-AU"), "Features/Anz", "AnzDelta", " Allows retrieval of ANZ items which have changed after a certiain point in time." +
                    "", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should only get merchant changes made after a point in time")]
        public void ShouldOnlyGetMerchantChangesMadeAfterAPointInTime()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should only get merchant changes made after a point in time", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                            "MerchantId",
                            "PopularMerchantRankingForBrowser",
                            "IsPopular",
                            "NetworkId"});
                table57.AddRow(new string[] {
                            "100",
                            "1",
                            "true",
                            "1000003"});
                table57.AddRow(new string[] {
                            "101",
                            "2",
                            "true",
                            "1000053"});
#line 6
 testRunner.Given("merchant data change event at \'30/07/2022 12:00:00\'", ((string)(null)), table57, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                            "MerchantId",
                            "PopularMerchantRankingForBrowser",
                            "IsPopular",
                            "NetworkId"});
                table58.AddRow(new string[] {
                            "103",
                            "3",
                            "true",
                            "1000053"});
#line 10
 testRunner.Given("merchant data change event at \'30/07/2022 13:00:00\'", ((string)(null)), table58, "Given ");
#line hidden
#line 13
 testRunner.When("I send an ANZ query with update after \'30/07/2022 12:01:00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "PopularMerchantRankingForBrowser"});
                table59.AddRow(new string[] {
                            "103",
                            "3"});
#line 14
 testRunner.Then("I should receive ANZ items", ((string)(null)), table59, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should only get offer changes made after a point in time")]
        public void ShouldOnlyGetOfferChangesMadeAfterAPointInTime()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should only get offer changes made after a point in time", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 20
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                            "Merchant.Id",
                            "OfferId",
                            "IsFeatured",
                            "Ranking"});
                table60.AddRow(new string[] {
                            "101",
                            "301",
                            "true",
                            "1"});
                table60.AddRow(new string[] {
                            "101",
                            "302",
                            "true",
                            "2"});
#line 21
 testRunner.Given("offer data change event at \'30/07/2022 12:00:00\'", ((string)(null)), table60, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                            "Merchant.Id",
                            "OfferId",
                            "IsFeatured",
                            "Ranking"});
                table61.AddRow(new string[] {
                            "101",
                            "302",
                            "true",
                            "5"});
#line 25
 testRunner.Given("offer data change event at \'30/07/2022 13:00:00\'", ((string)(null)), table61, "Given ");
#line hidden
#line 28
 testRunner.When("I send an ANZ query with update after \'30/07/2022 12:01:00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "FeaturedRanking"});
                table62.AddRow(new string[] {
                            "101-302",
                            "5"});
#line 29
 testRunner.Then("I should receive ANZ items", ((string)(null)), table62, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should only get merchant deletions made after a point in time")]
        public void ShouldOnlyGetMerchantDeletionsMadeAfterAPointInTime()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should only get merchant deletions made after a point in time", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 35
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                            "MerchantId",
                            "PopularMerchantRankingForBrowser",
                            "IsPopular",
                            "NetworkId"});
                table63.AddRow(new string[] {
                            "100",
                            "1",
                            "true",
                            "1000003"});
                table63.AddRow(new string[] {
                            "101",
                            "2",
                            "true",
                            "1000053"});
#line 36
 testRunner.Given("merchant data change event at \'30/07/2022 12:00:00\'", ((string)(null)), table63, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                            "MerchantId"});
                table64.AddRow(new string[] {
                            "101"});
#line 40
 testRunner.Given("merchant delete event at \'30/07/2022 12:30:00\'", ((string)(null)), table64, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                            "MerchantId"});
                table65.AddRow(new string[] {
                            "100"});
#line 43
 testRunner.Given("merchant delete event at \'30/07/2022 13:00:00\'", ((string)(null)), table65, "Given ");
#line hidden
#line 46
 testRunner.When("I send an ANZ query with update after \'30/07/2022 12:31:00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "IsDeleted"});
                table66.AddRow(new string[] {
                            "100",
                            "true"});
#line 47
 testRunner.Then("I should receive ANZ items", ((string)(null)), table66, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should only get offer deletions made after a point in time")]
        public void ShouldOnlyGetOfferDeletionsMadeAfterAPointInTime()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should only get offer deletions made after a point in time", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 53
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                            "Merchant.Id",
                            "OfferId",
                            "IsFeatured"});
                table67.AddRow(new string[] {
                            "101",
                            "301",
                            "true"});
                table67.AddRow(new string[] {
                            "101",
                            "302",
                            "true"});
#line 54
 testRunner.Given("offer data change event at \'30/07/2022 12:00:00\'", ((string)(null)), table67, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                            "Merchant.Id",
                            "OfferId"});
                table68.AddRow(new string[] {
                            "101",
                            "302"});
#line 58
 testRunner.Given("offer delete event at \'30/07/2022 12:30:00\'", ((string)(null)), table68, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table69 = new TechTalk.SpecFlow.Table(new string[] {
                            "Merchant.Id",
                            "OfferId"});
                table69.AddRow(new string[] {
                            "101",
                            "301"});
#line 61
 testRunner.Given("offer delete event at \'30/07/2022 13:00:00\'", ((string)(null)), table69, "Given ");
#line hidden
#line 64
 testRunner.When("I send an ANZ query with update after \'30/07/2022 12:31:00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table70 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "IsDeleted"});
                table70.AddRow(new string[] {
                            "101-301",
                            "true"});
#line 65
 testRunner.Then("I should receive ANZ items", ((string)(null)), table70, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Unavailable merchants should be returned as deleted")]
        public void UnavailableMerchantsShouldBeReturnedAsDeleted()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unavailable merchants should be returned as deleted", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 71
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table71 = new TechTalk.SpecFlow.Table(new string[] {
                            "MerchantId",
                            "PopularMerchantRankingForBrowser",
                            "IsPopular",
                            "NetworkId"});
                table71.AddRow(new string[] {
                            "101",
                            "1",
                            "true",
                            "1000003"});
                table71.AddRow(new string[] {
                            "102",
                            "2",
                            "true",
                            "1000053"});
                table71.AddRow(new string[] {
                            "103",
                            "3",
                            "true",
                            "1000053"});
#line 72
 testRunner.Given("merchant data change event at \'30/07/2022 12:00:00\'", ((string)(null)), table71, "Given ");
#line hidden
#line 77
 testRunner.When("I send an ANZ query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table72 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id"});
                table72.AddRow(new string[] {
                            "101"});
                table72.AddRow(new string[] {
                            "102"});
                table72.AddRow(new string[] {
                            "103"});
#line 78
 testRunner.Then("I should receive ANZ items", ((string)(null)), table72, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table73 = new TechTalk.SpecFlow.Table(new string[] {
                            "MerchantId",
                            "PopularMerchantRankingForBrowser",
                            "IsPopular",
                            "NetworkId",
                            "IsPremiumDisabled",
                            "IsPaused",
                            "MobileEnabled"});
                table73.AddRow(new string[] {
                            "101",
                            "1",
                            "true",
                            "1000003",
                            "true",
                            "false",
                            "true"});
                table73.AddRow(new string[] {
                            "102",
                            "2",
                            "true",
                            "1000053",
                            "false",
                            "true",
                            "true"});
                table73.AddRow(new string[] {
                            "103",
                            "2",
                            "true",
                            "1000053",
                            "false",
                            "false",
                            "false"});
#line 83
 testRunner.Given("merchant data change event at \'30/07/2022 12:30:00\'", ((string)(null)), table73, "Given ");
#line hidden
#line 88
 testRunner.When("I send an ANZ query with update after \'30/07/2022 12:29:00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table74 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "IsDeleted"});
                table74.AddRow(new string[] {
                            "101",
                            "true"});
                table74.AddRow(new string[] {
                            "102",
                            "true"});
                table74.AddRow(new string[] {
                            "103",
                            "true"});
#line 89
 testRunner.Then("I should receive ANZ items", ((string)(null)), table74, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Unavailable merchants should be returned as deleted after a point in time")]
        public void UnavailableMerchantsShouldBeReturnedAsDeletedAfterAPointInTime()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unavailable merchants should be returned as deleted after a point in time", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 97
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table75 = new TechTalk.SpecFlow.Table(new string[] {
                            "MerchantId",
                            "PopularMerchantRankingForBrowser",
                            "IsPopular",
                            "NetworkId",
                            "IsPremiumDisabled",
                            "IsPaused",
                            "MobileEnabled"});
                table75.AddRow(new string[] {
                            "101",
                            "1",
                            "true",
                            "1000003",
                            "false",
                            "false",
                            "true"});
                table75.AddRow(new string[] {
                            "102",
                            "2",
                            "true",
                            "1000053",
                            "false",
                            "false",
                            "true"});
                table75.AddRow(new string[] {
                            "103",
                            "3",
                            "true",
                            "1000053",
                            "false",
                            "false",
                            "true"});
                table75.AddRow(new string[] {
                            "104",
                            "4",
                            "true",
                            "1000053",
                            "false",
                            "false",
                            "true"});
                table75.AddRow(new string[] {
                            "105",
                            "5",
                            "true",
                            "1000053",
                            "false",
                            "false",
                            "true"});
                table75.AddRow(new string[] {
                            "106",
                            "6",
                            "true",
                            "1000053",
                            "false",
                            "false",
                            "true"});
                table75.AddRow(new string[] {
                            "107",
                            "7",
                            "true",
                            "1000053",
                            "false",
                            "false",
                            "true"});
                table75.AddRow(new string[] {
                            "108",
                            "8",
                            "true",
                            "1000053",
                            "false",
                            "false",
                            "true"});
#line 98
 testRunner.Given("merchant data change event at \'30/07/2022 12:00:00\'", ((string)(null)), table75, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table76 = new TechTalk.SpecFlow.Table(new string[] {
                            "MerchantId",
                            "PopularMerchantRankingForBrowser",
                            "IsPopular",
                            "NetworkId",
                            "IsPremiumDisabled",
                            "IsPaused",
                            "MobileEnabled"});
                table76.AddRow(new string[] {
                            "102",
                            "0",
                            "false",
                            "1000003",
                            "false",
                            "false",
                            "true"});
                table76.AddRow(new string[] {
                            "104",
                            "3",
                            "true",
                            "1000003",
                            "true",
                            "false",
                            "true"});
                table76.AddRow(new string[] {
                            "106",
                            "6",
                            "true",
                            "1000053",
                            "false",
                            "true",
                            "true"});
                table76.AddRow(new string[] {
                            "108",
                            "8",
                            "true",
                            "1000053",
                            "false",
                            "false",
                            "false"});
#line 108
 testRunner.Given("merchant data change event at \'30/07/2022 12:30:00\'", ((string)(null)), table76, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table77 = new TechTalk.SpecFlow.Table(new string[] {
                            "MerchantId",
                            "PopularMerchantRankingForBrowser",
                            "IsPopular",
                            "NetworkId",
                            "IsPremiumDisabled",
                            "IsPaused",
                            "MobileEnabled"});
                table77.AddRow(new string[] {
                            "101",
                            "0",
                            "false",
                            "1000003",
                            "false",
                            "false",
                            "true"});
                table77.AddRow(new string[] {
                            "103",
                            "4",
                            "true",
                            "1000003",
                            "true",
                            "false",
                            "true"});
                table77.AddRow(new string[] {
                            "105",
                            "5",
                            "true",
                            "1000053",
                            "false",
                            "true",
                            "true"});
                table77.AddRow(new string[] {
                            "107",
                            "7",
                            "true",
                            "1000053",
                            "false",
                            "false",
                            "false"});
#line 114
 testRunner.Given("merchant data change event at \'30/07/2022 13:00:00\'", ((string)(null)), table77, "Given ");
#line hidden
#line 120
 testRunner.When("I send an ANZ query with update after \'30/07/2022 12:59:00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table78 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Merchant.IsPopular",
                            "IsDeleted",
                            "Merchant.PopularRanking"});
                table78.AddRow(new string[] {
                            "101",
                            "false",
                            "true",
                            "0"});
                table78.AddRow(new string[] {
                            "103",
                            "true",
                            "true",
                            "1"});
                table78.AddRow(new string[] {
                            "105",
                            "true",
                            "true",
                            "1"});
                table78.AddRow(new string[] {
                            "107",
                            "true",
                            "true",
                            "1"});
#line 121
 testRunner.Then("I should receive ANZ items", ((string)(null)), table78, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Unavailable offers should be returned as deleted")]
        public void UnavailableOffersShouldBeReturnedAsDeleted()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unavailable offers should be returned as deleted", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 130
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table79 = new TechTalk.SpecFlow.Table(new string[] {
                            "Merchant.Id",
                            "OfferId",
                            "IsFeatured",
                            "IsPremiumDisabled",
                            "IsPaused",
                            "MobileEnabled"});
                table79.AddRow(new string[] {
                            "101",
                            "301",
                            "true",
                            "false",
                            "false",
                            "true"});
                table79.AddRow(new string[] {
                            "101",
                            "302",
                            "true",
                            "false",
                            "false",
                            "true"});
                table79.AddRow(new string[] {
                            "101",
                            "303",
                            "true",
                            "false",
                            "false",
                            "true"});
#line 131
 testRunner.Given("offer data change event at \'30/07/2022 12:00:00\'", ((string)(null)), table79, "Given ");
#line hidden
#line 136
 testRunner.When("I send an ANZ query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table80 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id"});
                table80.AddRow(new string[] {
                            "101-301"});
                table80.AddRow(new string[] {
                            "101-302"});
                table80.AddRow(new string[] {
                            "101-303"});
#line 137
 testRunner.Then("I should receive ANZ items", ((string)(null)), table80, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table81 = new TechTalk.SpecFlow.Table(new string[] {
                            "Merchant.Id",
                            "OfferId",
                            "IsFeatured",
                            "Merchant.IsPremiumDisabled",
                            "IsMerchantPaused",
                            "Merchant.MobileEnabled"});
                table81.AddRow(new string[] {
                            "101",
                            "301",
                            "true",
                            "true",
                            "false",
                            "true"});
                table81.AddRow(new string[] {
                            "101",
                            "302",
                            "true",
                            "false",
                            "true",
                            "true"});
                table81.AddRow(new string[] {
                            "101",
                            "303",
                            "true",
                            "false",
                            "false",
                            "false"});
#line 142
 testRunner.Given("offer data change event at \'30/07/2022 12:30:00\'", ((string)(null)), table81, "Given ");
#line hidden
#line 147
 testRunner.When("I send an ANZ query with update after \'30/07/2022 12:29:00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table82 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "IsDeleted"});
                table82.AddRow(new string[] {
                            "101-301",
                            "true"});
                table82.AddRow(new string[] {
                            "101-302",
                            "true"});
                table82.AddRow(new string[] {
                            "101-303",
                            "true"});
#line 148
 testRunner.Then("I should receive ANZ items", ((string)(null)), table82, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Unavailable offers should be returned as deleted after a point in time")]
        public void UnavailableOffersShouldBeReturnedAsDeletedAfterAPointInTime()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unavailable offers should be returned as deleted after a point in time", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 156
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table83 = new TechTalk.SpecFlow.Table(new string[] {
                            "Merchant.Id",
                            "OfferId",
                            "Ranking",
                            "IsFeatured",
                            "Merchant.IsPremiumDisabled",
                            "IsMerchantPaused",
                            "Merchant.MobileEnabled"});
                table83.AddRow(new string[] {
                            "101",
                            "301",
                            "9",
                            "true",
                            "false",
                            "false",
                            "true"});
                table83.AddRow(new string[] {
                            "101",
                            "302",
                            "8",
                            "true",
                            "false",
                            "false",
                            "true"});
                table83.AddRow(new string[] {
                            "101",
                            "303",
                            "7",
                            "true",
                            "false",
                            "false",
                            "true"});
                table83.AddRow(new string[] {
                            "101",
                            "304",
                            "6",
                            "true",
                            "false",
                            "false",
                            "true"});
                table83.AddRow(new string[] {
                            "101",
                            "305",
                            "5",
                            "true",
                            "false",
                            "false",
                            "true"});
                table83.AddRow(new string[] {
                            "101",
                            "306",
                            "4",
                            "true",
                            "false",
                            "false",
                            "true"});
                table83.AddRow(new string[] {
                            "101",
                            "307",
                            "3",
                            "true",
                            "false",
                            "false",
                            "true"});
                table83.AddRow(new string[] {
                            "101",
                            "308",
                            "2",
                            "true",
                            "false",
                            "false",
                            "true"});
#line 157
 testRunner.Given("offer data change event at \'30/07/2022 12:00:00\'", ((string)(null)), table83, "Given ");
#line hidden
#line 167
 testRunner.When("I send an ANZ query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table84 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Offer.IsFeatured",
                            "IsDeleted",
                            "Offer.FeaturedRanking"});
                table84.AddRow(new string[] {
                            "101-301",
                            "true",
                            "false",
                            "1"});
                table84.AddRow(new string[] {
                            "101-302",
                            "true",
                            "false",
                            "2"});
                table84.AddRow(new string[] {
                            "101-303",
                            "true",
                            "false",
                            "3"});
                table84.AddRow(new string[] {
                            "101-304",
                            "true",
                            "false",
                            "4"});
                table84.AddRow(new string[] {
                            "101-305",
                            "true",
                            "false",
                            "5"});
                table84.AddRow(new string[] {
                            "101-306",
                            "true",
                            "false",
                            "6"});
                table84.AddRow(new string[] {
                            "101-307",
                            "true",
                            "false",
                            "7"});
                table84.AddRow(new string[] {
                            "101-308",
                            "true",
                            "false",
                            "8"});
#line 168
 testRunner.Then("I should receive ANZ items", ((string)(null)), table84, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table85 = new TechTalk.SpecFlow.Table(new string[] {
                            "Merchant.Id",
                            "OfferId",
                            "IsFeatured",
                            "Merchant.IsPremiumDisabled",
                            "IsMerchantPaused",
                            "Merchant.MobileEnabled"});
                table85.AddRow(new string[] {
                            "101",
                            "302",
                            "false",
                            "false",
                            "false",
                            "true"});
                table85.AddRow(new string[] {
                            "101",
                            "304",
                            "true",
                            "true",
                            "false",
                            "true"});
                table85.AddRow(new string[] {
                            "101",
                            "306",
                            "true",
                            "false",
                            "true",
                            "true"});
                table85.AddRow(new string[] {
                            "101",
                            "308",
                            "true",
                            "false",
                            "false",
                            "false"});
#line 178
 testRunner.Given("offer data change event at \'30/07/2022 12:30:00\'", ((string)(null)), table85, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table86 = new TechTalk.SpecFlow.Table(new string[] {
                            "Merchant.Id",
                            "OfferId",
                            "IsFeatured",
                            "Merchant.IsPremiumDisabled",
                            "IsMerchantPaused",
                            "Merchant.MobileEnabled"});
                table86.AddRow(new string[] {
                            "101",
                            "301",
                            "false",
                            "false",
                            "false",
                            "true"});
                table86.AddRow(new string[] {
                            "101",
                            "303",
                            "true",
                            "true",
                            "false",
                            "true"});
                table86.AddRow(new string[] {
                            "101",
                            "305",
                            "true",
                            "false",
                            "true",
                            "true"});
                table86.AddRow(new string[] {
                            "101",
                            "307",
                            "true",
                            "false",
                            "false",
                            "false"});
#line 184
 testRunner.Given("offer data change event at \'30/07/2022 13:00:00\'", ((string)(null)), table86, "Given ");
#line hidden
#line 190
 testRunner.When("I send an ANZ query with update after \'30/07/2022 12:31:00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table87 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Offer.IsFeatured",
                            "IsDeleted",
                            "Offer.FeaturedRanking"});
                table87.AddRow(new string[] {
                            "101-301",
                            "false",
                            "true",
                            "0"});
                table87.AddRow(new string[] {
                            "101-303",
                            "true",
                            "true",
                            "1"});
                table87.AddRow(new string[] {
                            "101-305",
                            "true",
                            "true",
                            "1"});
                table87.AddRow(new string[] {
                            "101-307",
                            "true",
                            "true",
                            "1"});
#line 191
 testRunner.Then("I should receive ANZ items", ((string)(null)), table87, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should get all merchants that were resequenced due to popular ranking change afte" +
            "r a point in time")]
        public void ShouldGetAllMerchantsThatWereResequencedDueToPopularRankingChangeAfterAPointInTime()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should get all merchants that were resequenced due to popular ranking change afte" +
                    "r a point in time", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 200
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table88 = new TechTalk.SpecFlow.Table(new string[] {
                            "MerchantId",
                            "PopularMerchantRankingForBrowser",
                            "IsPopular"});
                table88.AddRow(new string[] {
                            "100",
                            "1",
                            "true"});
                table88.AddRow(new string[] {
                            "101",
                            "2",
                            "true"});
                table88.AddRow(new string[] {
                            "102",
                            "4",
                            "true"});
                table88.AddRow(new string[] {
                            "103",
                            "5",
                            "true"});
                table88.AddRow(new string[] {
                            "104",
                            "6",
                            "true"});
                table88.AddRow(new string[] {
                            "105",
                            "7",
                            "true"});
#line 201
 testRunner.Given("merchant data change event at \'30/07/2022 12:00:00\'", ((string)(null)), table88, "Given ");
#line hidden
#line 209
 testRunner.When("I send an ANZ query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table89 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Merchant.IsPopular",
                            "Merchant.PopularRanking"});
                table89.AddRow(new string[] {
                            "100",
                            "true",
                            "1"});
                table89.AddRow(new string[] {
                            "101",
                            "true",
                            "2"});
                table89.AddRow(new string[] {
                            "102",
                            "true",
                            "3"});
                table89.AddRow(new string[] {
                            "103",
                            "true",
                            "4"});
                table89.AddRow(new string[] {
                            "104",
                            "true",
                            "5"});
                table89.AddRow(new string[] {
                            "105",
                            "true",
                            "6"});
#line 210
 testRunner.Then("I should receive ANZ items", ((string)(null)), table89, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table90 = new TechTalk.SpecFlow.Table(new string[] {
                            "MerchantId",
                            "PopularMerchantRankingForBrowser",
                            "IsPopular"});
                table90.AddRow(new string[] {
                            "105",
                            "3",
                            "true"});
#line 218
 testRunner.Given("merchant data change event at \'30/07/2022 12:30:00\'", ((string)(null)), table90, "Given ");
#line hidden
#line 221
 testRunner.When("I send an ANZ query with update after \'30/07/2022 12:29:00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table91 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Merchant.IsPopular",
                            "Merchant.PopularRanking"});
                table91.AddRow(new string[] {
                            "102",
                            "true",
                            "4"});
                table91.AddRow(new string[] {
                            "103",
                            "true",
                            "5"});
                table91.AddRow(new string[] {
                            "104",
                            "true",
                            "6"});
                table91.AddRow(new string[] {
                            "105",
                            "true",
                            "3"});
#line 222
 testRunner.Then("I should receive ANZ items", ((string)(null)), table91, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should get all merchants that were resequenced due to in-store ranking change aft" +
            "er a point in time")]
        public void ShouldGetAllMerchantsThatWereResequencedDueToIn_StoreRankingChangeAfterAPointInTime()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should get all merchants that were resequenced due to in-store ranking change aft" +
                    "er a point in time", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 231
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table92 = new TechTalk.SpecFlow.Table(new string[] {
                            "MerchantId",
                            "IsPopular",
                            "NetworkId",
                            "IsHomePageFeatured",
                            "IsFeatured",
                            "Name"});
                table92.AddRow(new string[] {
                            "100",
                            "true",
                            "1000053",
                            "false",
                            "false",
                            "Pizza Hut"});
                table92.AddRow(new string[] {
                            "101",
                            "true",
                            "1000053",
                            "false",
                            "false",
                            "MacDonalds"});
                table92.AddRow(new string[] {
                            "102",
                            "true",
                            "1000053",
                            "true",
                            "false",
                            "Nazimi"});
                table92.AddRow(new string[] {
                            "103",
                            "true",
                            "1000053",
                            "true",
                            "false",
                            "KFC"});
                table92.AddRow(new string[] {
                            "104",
                            "true",
                            "1000053",
                            "false",
                            "true",
                            "Red Rooster"});
                table92.AddRow(new string[] {
                            "105",
                            "true",
                            "1000053",
                            "false",
                            "true",
                            "New Shanghai"});
#line 232
 testRunner.Given("merchant data change event at \'30/07/2022 12:00:00\'", ((string)(null)), table92, "Given ");
#line hidden
#line 240
 testRunner.When("I send an ANZ query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table93 = new TechTalk.SpecFlow.Table(new string[] {
                            "Merchant.Id",
                            "Merchant.IsInstore",
                            "Merchant.InstoreRanking"});
                table93.AddRow(new string[] {
                            "100",
                            "true",
                            "6"});
                table93.AddRow(new string[] {
                            "101",
                            "true",
                            "5"});
                table93.AddRow(new string[] {
                            "102",
                            "true",
                            "2"});
                table93.AddRow(new string[] {
                            "103",
                            "true",
                            "1"});
                table93.AddRow(new string[] {
                            "104",
                            "true",
                            "4"});
                table93.AddRow(new string[] {
                            "105",
                            "true",
                            "3"});
#line 241
 testRunner.Then("I should receive ANZ items", ((string)(null)), table93, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table94 = new TechTalk.SpecFlow.Table(new string[] {
                            "MerchantId",
                            "IsPopular",
                            "NetworkId",
                            "IsHomePageFeatured",
                            "IsFeatured",
                            "Name"});
                table94.AddRow(new string[] {
                            "106",
                            "true",
                            "1000053",
                            "false",
                            "true",
                            "Sizzler"});
#line 249
 testRunner.Given("merchant data change event at \'30/07/2022 12:30:00\'", ((string)(null)), table94, "Given ");
#line hidden
#line 252
 testRunner.When("I send an ANZ query with update after \'30/07/2022 12:29:00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table95 = new TechTalk.SpecFlow.Table(new string[] {
                            "Merchant.Id",
                            "Merchant.IsInstore",
                            "Merchant.InstoreRanking"});
                table95.AddRow(new string[] {
                            "100",
                            "true",
                            "7"});
                table95.AddRow(new string[] {
                            "101",
                            "true",
                            "6"});
                table95.AddRow(new string[] {
                            "106",
                            "true",
                            "5"});
#line 253
 testRunner.Then("I should receive ANZ items", ((string)(null)), table95, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should get all offers that were resequenced due to featured offer ranking change " +
            "after a point in time")]
        public void ShouldGetAllOffersThatWereResequencedDueToFeaturedOfferRankingChangeAfterAPointInTime()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should get all offers that were resequenced due to featured offer ranking change " +
                    "after a point in time", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 261
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table96 = new TechTalk.SpecFlow.Table(new string[] {
                            "Merchant.Id",
                            "EndDateTime",
                            "IsFeatured",
                            "OfferId",
                            "Ranking"});
                table96.AddRow(new string[] {
                            "100",
                            "637922304380000000",
                            "true",
                            "100",
                            "0"});
                table96.AddRow(new string[] {
                            "101",
                            "637922304380000000",
                            "true",
                            "101",
                            "0"});
                table96.AddRow(new string[] {
                            "102",
                            "637922304380000000",
                            "true",
                            "102",
                            "0"});
                table96.AddRow(new string[] {
                            "103",
                            "637922304380000000",
                            "true",
                            "103",
                            "1"});
                table96.AddRow(new string[] {
                            "104",
                            "637922304380000000",
                            "true",
                            "104",
                            "0"});
                table96.AddRow(new string[] {
                            "105",
                            "637922304380000000",
                            "true",
                            "105",
                            "999"});
#line 262
 testRunner.Given("offer data change event at \'30/07/2022 12:00:00\'", ((string)(null)), table96, "Given ");
#line hidden
#line 270
 testRunner.When("I send an ANZ query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table97 = new TechTalk.SpecFlow.Table(new string[] {
                            "ItemId",
                            "Offer.IsFeatured",
                            "Offer.FeaturedRanking"});
                table97.AddRow(new string[] {
                            "100-100",
                            "true",
                            "3"});
                table97.AddRow(new string[] {
                            "101-101",
                            "true",
                            "4"});
                table97.AddRow(new string[] {
                            "102-102",
                            "true",
                            "5"});
                table97.AddRow(new string[] {
                            "103-103",
                            "true",
                            "2"});
                table97.AddRow(new string[] {
                            "104-104",
                            "true",
                            "6"});
                table97.AddRow(new string[] {
                            "105-105",
                            "true",
                            "1"});
#line 271
 testRunner.Then("I should receive ANZ items", ((string)(null)), table97, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table98 = new TechTalk.SpecFlow.Table(new string[] {
                            "Merchant.Id",
                            "EndDateTime",
                            "IsFeatured",
                            "OfferId",
                            "Ranking"});
                table98.AddRow(new string[] {
                            "101",
                            "637922304380000000",
                            "true",
                            "101",
                            "3"});
#line 279
 testRunner.Given("offer data change event at \'30/07/2022 12:30:00\'", ((string)(null)), table98, "Given ");
#line hidden
#line 282
 testRunner.When("I send an ANZ query with update after \'30/07/2022 12:29:00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table99 = new TechTalk.SpecFlow.Table(new string[] {
                            "ItemId",
                            "Offer.IsFeatured",
                            "Offer.FeaturedRanking"});
                table99.AddRow(new string[] {
                            "100-100",
                            "true",
                            "4"});
                table99.AddRow(new string[] {
                            "101-101",
                            "true",
                            "3"});
                table99.AddRow(new string[] {
                            "103-103",
                            "true",
                            "2"});
#line 283
 testRunner.Then("I should receive ANZ items", ((string)(null)), table99, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
