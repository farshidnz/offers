// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CashrewardsOffers.Application.AcceptanceTests.Features.Anz
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("AnzCarouselSelection")]
    public partial class AnzCarouselSelectionFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "AnzCarouselSelection.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-AU"), "Features/Anz", "AnzCarouselSelection", @"An API that gets offers and merchant info for consumption by ANZ bank.

These tests check that ANZ items appear in the correct carousel. Also that they are omitted if not present in any carousel.

Inclusion in carousels is indicated by the following fields in the response.
Merchant.IsPopular - Popular Merchants carousel
Merchant.IsInstore - InStore Merchants carousel
Offer.IsFeatured - Featureed Offers carousel
Offer.IsExclusive - Anz Max carousel", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get in-store item")]
        public void GetIn_StoreItem()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get in-store item", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "MerchantId",
                            "PopularMerchantRankingForBrowser",
                            "NetworkId"});
                table13.AddRow(new string[] {
                            "103",
                            "0",
                            "1000053"});
#line 15
 testRunner.Given("merchant data change event", ((string)(null)), table13, "Given ");
#line hidden
#line 18
 testRunner.When("I send an ANZ query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Merchant.Id",
                            "Merchant.IsPopular",
                            "Merchant.IsInstore"});
                table14.AddRow(new string[] {
                            "103",
                            "103",
                            "false",
                            "true"});
#line 19
 testRunner.Then("I should receive ANZ items", ((string)(null)), table14, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get popular item")]
        public void GetPopularItem()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get popular item", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 25
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "MerchantId",
                            "PopularMerchantRankingForBrowser",
                            "IsPopular"});
                table15.AddRow(new string[] {
                            "100",
                            "1",
                            "true"});
#line 26
 testRunner.Given("merchant data change event", ((string)(null)), table15, "Given ");
#line hidden
#line 29
 testRunner.When("I send an ANZ query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Merchant.Id",
                            "Merchant.IsPopular"});
                table16.AddRow(new string[] {
                            "100",
                            "100",
                            "true"});
#line 30
 testRunner.Then("I should receive ANZ items", ((string)(null)), table16, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get featured item")]
        public void GetFeaturedItem()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get featured item", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 36
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "OfferId",
                            "Merchant.Id",
                            "IsFeatured"});
                table17.AddRow(new string[] {
                            "301",
                            "101",
                            "true"});
#line 37
 testRunner.Given("offer data change event", ((string)(null)), table17, "Given ");
#line hidden
#line 40
 testRunner.When("I send an ANZ query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Merchant.Id",
                            "Offer.IsFeatured"});
                table18.AddRow(new string[] {
                            "101-301",
                            "101",
                            "true"});
#line 41
 testRunner.Then("I should receive ANZ items", ((string)(null)), table18, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should not return merchant if PopularMerchantRankingForBrowser changes to zero or" +
            " IsPopular change to false")]
        public void ShouldNotReturnMerchantIfPopularMerchantRankingForBrowserChangesToZeroOrIsPopularChangeToFalse()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should not return merchant if PopularMerchantRankingForBrowser changes to zero or" +
                    " IsPopular change to false", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 47
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "MerchantId",
                            "PopularMerchantRankingForBrowser",
                            "IsPopular"});
                table19.AddRow(new string[] {
                            "100",
                            "1",
                            "true"});
                table19.AddRow(new string[] {
                            "101",
                            "2",
                            "true"});
#line 48
 testRunner.Given("merchant data change event", ((string)(null)), table19, "Given ");
#line hidden
#line 52
 testRunner.When("I send an ANZ query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Merchant.Id",
                            "Merchant.IsPopular"});
                table20.AddRow(new string[] {
                            "100",
                            "100",
                            "true"});
                table20.AddRow(new string[] {
                            "101",
                            "101",
                            "true"});
#line 53
 testRunner.Then("I should receive ANZ items", ((string)(null)), table20, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                            "MerchantId",
                            "PopularMerchantRankingForBrowser",
                            "IsPopular"});
                table21.AddRow(new string[] {
                            "100",
                            "1",
                            "false"});
                table21.AddRow(new string[] {
                            "101",
                            "0",
                            "true"});
#line 57
 testRunner.Given("merchant data change event", ((string)(null)), table21, "Given ");
#line hidden
#line 61
 testRunner.When("I send an ANZ query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id"});
#line 62
 testRunner.Then("I should receive ANZ items", ((string)(null)), table22, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Item should include both IsPopular and IsInstore given the network ID changes")]
        public void ItemShouldIncludeBothIsPopularAndIsInstoreGivenTheNetworkIDChanges()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Item should include both IsPopular and IsInstore given the network ID changes", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 67
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                            "MerchantId",
                            "PopularMerchantRankingForBrowser",
                            "NetworkId",
                            "IsPopular"});
                table23.AddRow(new string[] {
                            "100",
                            "1",
                            "1000003",
                            "true"});
#line 68
 testRunner.Given("merchant data change event", ((string)(null)), table23, "Given ");
#line hidden
#line 71
 testRunner.When("I send an ANZ query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Merchant.Id",
                            "Merchant.IsPopular",
                            "Merchant.IsInstore"});
                table24.AddRow(new string[] {
                            "100",
                            "100",
                            "true",
                            "false"});
#line 72
 testRunner.Then("I should receive ANZ items", ((string)(null)), table24, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                            "MerchantId",
                            "PopularMerchantRankingForBrowser",
                            "NetworkId"});
                table25.AddRow(new string[] {
                            "100",
                            "1",
                            "1000053"});
#line 75
 testRunner.Given("merchant data change event", ((string)(null)), table25, "Given ");
#line hidden
#line 78
 testRunner.When("I send an ANZ query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Merchant.Id",
                            "Merchant.IsPopular",
                            "Merchant.IsInstore"});
                table26.AddRow(new string[] {
                            "100",
                            "100",
                            "true",
                            "true"});
#line 79
 testRunner.Then("I should receive ANZ items", ((string)(null)), table26, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should not return merchant if IsFeatured changes to false")]
        public void ShouldNotReturnMerchantIfIsFeaturedChangesToFalse()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should not return merchant if IsFeatured changes to false", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 85
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                            "OfferId",
                            "Merchant.Id",
                            "IsFeatured"});
                table27.AddRow(new string[] {
                            "301",
                            "101",
                            "true"});
#line 86
 testRunner.Given("offer data change event", ((string)(null)), table27, "Given ");
#line hidden
#line 89
 testRunner.When("I send an ANZ query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Merchant.Id",
                            "Offer.IsFeatured"});
                table28.AddRow(new string[] {
                            "101-301",
                            "101",
                            "true"});
#line 90
 testRunner.Then("I should receive ANZ items", ((string)(null)), table28, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                            "OfferId",
                            "Merchant.Id",
                            "IsFeatured"});
                table29.AddRow(new string[] {
                            "301",
                            "101",
                            "false"});
#line 93
 testRunner.Given("offer data change event", ((string)(null)), table29, "Given ");
#line hidden
#line 96
 testRunner.When("I send an ANZ query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id"});
#line 97
 testRunner.Then("I should receive ANZ items", ((string)(null)), table30, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
