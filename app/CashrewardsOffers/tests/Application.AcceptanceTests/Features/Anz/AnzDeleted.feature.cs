// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CashrewardsOffers.Application.AcceptanceTests.Features.Anz
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("AnzDeleted")]
    public partial class AnzDeletedFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "AnzDeleted.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-AU"), "Features/Anz", "AnzDeleted", " Handles the case where merchants and/or offers are deleted for any reason. Also " +
                    "when they are reinstated.", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Deleted merchants should not be returned")]
        public void DeletedMerchantsShouldNotBeReturned()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Deleted merchants should not be returned", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                            "MerchantId",
                            "PopularMerchantRankingForBrowser",
                            "IsPopular",
                            "NetworkId"});
                table31.AddRow(new string[] {
                            "100",
                            "1",
                            "true",
                            "1000003"});
                table31.AddRow(new string[] {
                            "103",
                            "2",
                            "true",
                            "1000053"});
#line 6
 testRunner.Given("merchant data change event", ((string)(null)), table31, "Given ");
#line hidden
#line 10
 testRunner.When("I send an ANZ query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id"});
                table32.AddRow(new string[] {
                            "100"});
                table32.AddRow(new string[] {
                            "103"});
#line 11
 testRunner.Then("I should receive ANZ items", ((string)(null)), table32, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                            "MerchantId"});
                table33.AddRow(new string[] {
                            "100"});
                table33.AddRow(new string[] {
                            "103"});
#line 15
 testRunner.Given("merchant delete event", ((string)(null)), table33, "Given ");
#line hidden
#line 19
 testRunner.When("I send an ANZ query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id"});
#line 20
 testRunner.Then("I should receive ANZ items", ((string)(null)), table34, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Deleted merchants should be returned if reinstated")]
        public void DeletedMerchantsShouldBeReturnedIfReinstated()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Deleted merchants should be returned if reinstated", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 25
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                            "MerchantId",
                            "PopularMerchantRankingForBrowser",
                            "IsPopular",
                            "NetworkId"});
                table35.AddRow(new string[] {
                            "100",
                            "1",
                            "true",
                            "1000003"});
                table35.AddRow(new string[] {
                            "103",
                            "2",
                            "true",
                            "1000053"});
#line 26
 testRunner.Given("merchant data change event", ((string)(null)), table35, "Given ");
#line hidden
#line 30
 testRunner.When("I send an ANZ query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id"});
                table36.AddRow(new string[] {
                            "100"});
                table36.AddRow(new string[] {
                            "103"});
#line 31
 testRunner.Then("I should receive ANZ items", ((string)(null)), table36, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                            "MerchantId"});
                table37.AddRow(new string[] {
                            "100"});
                table37.AddRow(new string[] {
                            "103"});
#line 35
 testRunner.Given("merchant delete event", ((string)(null)), table37, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                            "MerchantId",
                            "PopularMerchantRankingForBrowser",
                            "IsPopular",
                            "NetworkId"});
                table38.AddRow(new string[] {
                            "100",
                            "1",
                            "true",
                            "1000053"});
                table38.AddRow(new string[] {
                            "103",
                            "2",
                            "true",
                            "1000003"});
#line 39
 testRunner.Given("merchant data change event", ((string)(null)), table38, "Given ");
#line hidden
#line 43
 testRunner.When("I send an ANZ query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Merchant.IsPopular",
                            "Merchant.IsInstore"});
                table39.AddRow(new string[] {
                            "100",
                            "true",
                            "true"});
                table39.AddRow(new string[] {
                            "103",
                            "true",
                            "false"});
#line 44
 testRunner.Then("I should receive ANZ items", ((string)(null)), table39, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Deleted offers should not be returned")]
        public void DeletedOffersShouldNotBeReturned()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Deleted offers should not be returned", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 51
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                            "Merchant.Id",
                            "OfferId",
                            "IsFeatured"});
                table40.AddRow(new string[] {
                            "101",
                            "301",
                            "true"});
#line 52
 testRunner.Given("offer data change event", ((string)(null)), table40, "Given ");
#line hidden
#line 55
 testRunner.When("I send an ANZ query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id"});
                table41.AddRow(new string[] {
                            "101-301"});
#line 56
 testRunner.Then("I should receive ANZ items", ((string)(null)), table41, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                            "Merchant.Id",
                            "OfferId"});
                table42.AddRow(new string[] {
                            "101",
                            "301"});
#line 59
 testRunner.Given("offer delete event", ((string)(null)), table42, "Given ");
#line hidden
#line 62
 testRunner.When("I send an ANZ query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id"});
#line 63
 testRunner.Then("I should receive ANZ items", ((string)(null)), table43, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Deleted offers should be returned if reinstated")]
        public void DeletedOffersShouldBeReturnedIfReinstated()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Deleted offers should be returned if reinstated", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 68
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                            "Merchant.Id",
                            "OfferId",
                            "IsFeatured"});
                table44.AddRow(new string[] {
                            "101",
                            "301",
                            "true"});
#line 69
 testRunner.Given("offer data change event", ((string)(null)), table44, "Given ");
#line hidden
#line 72
 testRunner.When("I send an ANZ query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id"});
                table45.AddRow(new string[] {
                            "101-301"});
#line 73
 testRunner.Then("I should receive ANZ items", ((string)(null)), table45, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                            "Merchant.Id",
                            "OfferId"});
                table46.AddRow(new string[] {
                            "101",
                            "301"});
#line 76
 testRunner.Given("offer delete event", ((string)(null)), table46, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                            "Merchant.Id",
                            "OfferId",
                            "IsFeatured"});
                table47.AddRow(new string[] {
                            "101",
                            "301",
                            "true"});
#line 79
 testRunner.Given("offer data change event", ((string)(null)), table47, "Given ");
#line hidden
#line 82
 testRunner.When("I send an ANZ query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Offer.IsFeatured"});
                table48.AddRow(new string[] {
                            "101-301",
                            "true"});
#line 83
 testRunner.Then("I should receive ANZ items", ((string)(null)), table48, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Unavailable merchants should not be returned")]
        public void UnavailableMerchantsShouldNotBeReturned()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unavailable merchants should not be returned", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 89
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                            "MerchantId",
                            "PopularMerchantRankingForBrowser",
                            "IsPopular",
                            "NetworkId"});
                table49.AddRow(new string[] {
                            "101",
                            "1",
                            "true",
                            "1000003"});
                table49.AddRow(new string[] {
                            "102",
                            "2",
                            "true",
                            "1000053"});
                table49.AddRow(new string[] {
                            "103",
                            "3",
                            "true",
                            "1000053"});
#line 90
 testRunner.Given("merchant data change event", ((string)(null)), table49, "Given ");
#line hidden
#line 95
 testRunner.When("I send an ANZ query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id"});
                table50.AddRow(new string[] {
                            "101"});
                table50.AddRow(new string[] {
                            "102"});
                table50.AddRow(new string[] {
                            "103"});
#line 96
 testRunner.Then("I should receive ANZ items", ((string)(null)), table50, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                            "MerchantId",
                            "PopularMerchantRankingForBrowser",
                            "IsPopular",
                            "NetworkId",
                            "IsPremiumDisabled",
                            "IsPaused",
                            "MobileEnabled"});
                table51.AddRow(new string[] {
                            "101",
                            "1",
                            "true",
                            "1000003",
                            "true",
                            "false",
                            "true"});
                table51.AddRow(new string[] {
                            "102",
                            "2",
                            "true",
                            "1000053",
                            "false",
                            "true",
                            "true"});
                table51.AddRow(new string[] {
                            "103",
                            "2",
                            "true",
                            "1000053",
                            "false",
                            "false",
                            "false"});
#line 101
 testRunner.Given("merchant data change event", ((string)(null)), table51, "Given ");
#line hidden
#line 106
 testRunner.When("I send an ANZ query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id"});
#line 107
 testRunner.Then("I should receive ANZ items", ((string)(null)), table52, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Unavailable offers should not be returned")]
        public void UnavailableOffersShouldNotBeReturned()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unavailable offers should not be returned", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 112
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                            "Merchant.Id",
                            "OfferId",
                            "IsFeatured",
                            "IsPremiumDisabled",
                            "IsPaused",
                            "MobileEnabled"});
                table53.AddRow(new string[] {
                            "101",
                            "301",
                            "true",
                            "false",
                            "false",
                            "true"});
                table53.AddRow(new string[] {
                            "101",
                            "302",
                            "true",
                            "false",
                            "false",
                            "true"});
                table53.AddRow(new string[] {
                            "101",
                            "303",
                            "true",
                            "false",
                            "false",
                            "true"});
#line 113
 testRunner.Given("offer data change event", ((string)(null)), table53, "Given ");
#line hidden
#line 118
 testRunner.When("I send an ANZ query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id"});
                table54.AddRow(new string[] {
                            "101-301"});
                table54.AddRow(new string[] {
                            "101-302"});
                table54.AddRow(new string[] {
                            "101-303"});
#line 119
 testRunner.Then("I should receive ANZ items", ((string)(null)), table54, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                            "Merchant.Id",
                            "OfferId",
                            "IsFeatured",
                            "Merchant.IsPremiumDisabled",
                            "IsMerchantPaused",
                            "Merchant.MobileEnabled"});
                table55.AddRow(new string[] {
                            "101",
                            "301",
                            "true",
                            "true",
                            "false",
                            "true"});
                table55.AddRow(new string[] {
                            "101",
                            "302",
                            "true",
                            "false",
                            "true",
                            "true"});
                table55.AddRow(new string[] {
                            "101",
                            "303",
                            "true",
                            "false",
                            "false",
                            "false"});
#line 124
 testRunner.Given("offer data change event", ((string)(null)), table55, "Given ");
#line hidden
#line 129
 testRunner.When("I send an ANZ query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id"});
#line 130
 testRunner.Then("I should receive ANZ items", ((string)(null)), table56, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
