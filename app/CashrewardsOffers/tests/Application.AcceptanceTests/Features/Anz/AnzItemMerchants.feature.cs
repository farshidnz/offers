// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CashrewardsOffers.Application.AcceptanceTests.Features.Anz
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ANZ Offers API - Merchants")]
    public partial class ANZOffersAPI_MerchantsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "AnzItemMerchants.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-AU"), "Features/Anz", "ANZ Offers API - Merchants", "    As PM\r\n    I want to add the Merchant attributes to the ANZ Offers API\r\n    S" +
                    "o that ANZ can store the Merchant attributes and display it in the ANZ App", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Available Merchant attribute fields in Offers API for ANZ")]
        [NUnit.Framework.TestCaseAttribute("Items[].Merchant.Id", "mandatory", null)]
        [NUnit.Framework.TestCaseAttribute("Items[].Merchant.Name", "mandatory", null)]
        [NUnit.Framework.TestCaseAttribute("Items[].Merchant.Link", "mandatory", null)]
        [NUnit.Framework.TestCaseAttribute("Items[].Merchant.StartDateTime", "mandatory", null)]
        [NUnit.Framework.TestCaseAttribute("Items[].Merchant.EndDateTime", "mandatory", null)]
        [NUnit.Framework.TestCaseAttribute("Items[].Merchant.LogoUrl", "mandatory", null)]
        [NUnit.Framework.TestCaseAttribute("Items[].Merchant.ClientCommissionString", "mandatory", null)]
        [NUnit.Framework.TestCaseAttribute("Items[].Merchant.CashbackGuidelines", "optional", null)]
        [NUnit.Framework.TestCaseAttribute("Items[].Merchant.SpecialTerms", "optional", null)]
        [NUnit.Framework.TestCaseAttribute("Items[].Merchant.IsInstore", "mandatory", null)]
        [NUnit.Framework.TestCaseAttribute("Items[].Merchant.InstoreTerms", "optional", null)]
        [NUnit.Framework.TestCaseAttribute("Items[].Merchant.IsPopular", "mandatory", null)]
        [NUnit.Framework.TestCaseAttribute("Items[].Merchant.Categories[].Id", "mandatory", null)]
        [NUnit.Framework.TestCaseAttribute("Items[].Merchant.Categories[].Name", "mandatory", null)]
        public void AvailableMerchantAttributeFieldsInOffersAPIForANZ(string fields, string mandatory, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("fields", fields);
            argumentsOfScenario.Add("mandatory", mandatory);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Available Merchant attribute fields in Offers API for ANZ", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 8
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 10
        testRunner.Given("API for ANZ is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 11
        testRunner.When("I call the api", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 12
        testRunner.And("auth token is valid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
        testRunner.Then(string.Format("the API returns the \'{0}\' for Merchant and Offer in the response as \'{1}\'", fields, mandatory), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
