// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CashrewardsOffers.Application.AcceptanceTests.Features.EdmOffers
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("GetEdmOffers")]
    public partial class GetEdmOffersFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "GetEdmOffers.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-AU"), "Features/EdmOffers", "GetEdmOffers", "An API that gets offer information in a format to be consumed by Electronic Direc" +
                    "t Mail provider LeanPlum.", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get offers")]
        public void GetOffers()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get offers", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table132 = new TechTalk.SpecFlow.Table(new string[] {
                            "Title",
                            "Ranking"});
                table132.AddRow(new string[] {
                            "Offer-1",
                            "1"});
                table132.AddRow(new string[] {
                            "Offer-2",
                            "99"});
                table132.AddRow(new string[] {
                            "Offer-3",
                            "3"});
#line 6
 testRunner.Given("offers exist in the ShopGo database", ((string)(null)), table132, "Given ");
#line hidden
#line 11
 testRunner.Given("the offer sync job has run", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 12
 testRunner.When("I send an EDM offer query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table133 = new TechTalk.SpecFlow.Table(new string[] {
                            "Title"});
                table133.AddRow(new string[] {
                            "Offer-2"});
                table133.AddRow(new string[] {
                            "Offer-3"});
                table133.AddRow(new string[] {
                            "Offer-1"});
#line 13
 testRunner.Then("I should receive EDM offers in the correct order", ((string)(null)), table133, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get offers with terms")]
        public void GetOffersWithTerms()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get offers with terms", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table134 = new TechTalk.SpecFlow.Table(new string[] {
                            "MerchantId",
                            "Title",
                            "Ranking"});
                table134.AddRow(new string[] {
                            "100",
                            "Offer-1",
                            "5"});
                table134.AddRow(new string[] {
                            "100",
                            "Offer-2",
                            "4"});
                table134.AddRow(new string[] {
                            "101",
                            "Offer-3",
                            "3"});
#line 22
 testRunner.Given("offers exist in the ShopGo database", ((string)(null)), table134, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table135 = new TechTalk.SpecFlow.Table(new string[] {
                            "MerchantId",
                            "terms"});
                table135.AddRow(new string[] {
                            "100",
                            "Capped at $10 - Ends 11:59pm"});
                table135.AddRow(new string[] {
                            "101",
                            "Capped at $20 - Ends soon"});
#line 27
 testRunner.Given("merchant tiers exist in the ShopGo database", ((string)(null)), table135, "Given ");
#line hidden
#line 31
 testRunner.Given("the offer sync job has run", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 32
 testRunner.When("I send an EDM offer query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table136 = new TechTalk.SpecFlow.Table(new string[] {
                            "Title",
                            "Terms"});
                table136.AddRow(new string[] {
                            "Offer-1",
                            "Capped at $10 - Ends 11:59pm"});
                table136.AddRow(new string[] {
                            "Offer-2",
                            "Capped at $10 - Ends 11:59pm"});
                table136.AddRow(new string[] {
                            "Offer-3",
                            "Capped at $20 - Ends soon"});
#line 33
 testRunner.Then("I should receive EDM offers in the correct order", ((string)(null)), table136, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Order offers by ranking then end date")]
        public void OrderOffersByRankingThenEndDate()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Order offers by ranking then end date", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 41
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table137 = new TechTalk.SpecFlow.Table(new string[] {
                            "MerchantId",
                            "Title",
                            "Ranking",
                            "EndDateTime"});
                table137.AddRow(new string[] {
                            "100",
                            "Offer-1",
                            "5",
                            ""});
                table137.AddRow(new string[] {
                            "100",
                            "Offer-2",
                            "4",
                            ""});
                table137.AddRow(new string[] {
                            "101",
                            "Offer-3",
                            "1",
                            "3/01/2022 11:59:59 PM"});
                table137.AddRow(new string[] {
                            "101",
                            "Offer-4",
                            "1",
                            "2/01/2022 11:59:59 PM"});
                table137.AddRow(new string[] {
                            "101",
                            "Offer-5",
                            "1",
                            "1/01/2022 11:59:59 PM"});
#line 42
 testRunner.Given("offers exist in the ShopGo database", ((string)(null)), table137, "Given ");
#line hidden
#line 49
 testRunner.Given("the offer sync job has run", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 50
 testRunner.When("I send an EDM offer query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table138 = new TechTalk.SpecFlow.Table(new string[] {
                            "Title"});
                table138.AddRow(new string[] {
                            "Offer-1"});
                table138.AddRow(new string[] {
                            "Offer-2"});
                table138.AddRow(new string[] {
                            "Offer-5"});
                table138.AddRow(new string[] {
                            "Offer-4"});
                table138.AddRow(new string[] {
                            "Offer-3"});
#line 51
 testRunner.Then("I should receive EDM offers in the correct order", ((string)(null)), table138, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Order offers by experiment 1 - top 2 favourites by best offer rate")]
        public void OrderOffersByExperiment1_Top2FavouritesByBestOfferRate()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Order offers by experiment 1 - top 2 favourites by best offer rate", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 61
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table139 = new TechTalk.SpecFlow.Table(new string[] {
                            "FeatureToggleName"});
                table139.AddRow(new string[] {
                            "Exp1"});
                table139.AddRow(new string[] {
                            "EnrolExp1"});
#line 62
 testRunner.Given("Unleash feature toggles", ((string)(null)), table139, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table140 = new TechTalk.SpecFlow.Table(new string[] {
                            "MerchantId",
                            "Title",
                            "Ranking",
                            "OfferString"});
                table140.AddRow(new string[] {
                            "1",
                            "Offer-1",
                            "10",
                            "up to 20%"});
                table140.AddRow(new string[] {
                            "2",
                            "Offer-2",
                            "9",
                            "up to $25"});
                table140.AddRow(new string[] {
                            "3",
                            "Offer-3",
                            "8",
                            "10%"});
                table140.AddRow(new string[] {
                            "4",
                            "Offer-4",
                            "7",
                            "12%"});
                table140.AddRow(new string[] {
                            "5",
                            "Offer-5",
                            "6",
                            "14%"});
                table140.AddRow(new string[] {
                            "6",
                            "Offer-6",
                            "5",
                            "up to 25%"});
                table140.AddRow(new string[] {
                            "7",
                            "Offer-7",
                            "4",
                            "$50"});
                table140.AddRow(new string[] {
                            "8",
                            "Offer-8",
                            "3",
                            "50%"});
                table140.AddRow(new string[] {
                            "9",
                            "Offer-9",
                            "2",
                            "up to 50%"});
                table140.AddRow(new string[] {
                            "10",
                            "Offer-10",
                            "1",
                            "up to $50"});
#line 66
 testRunner.Given("offers exist in the ShopGo database", ((string)(null)), table140, "Given ");
#line hidden
#line 78
 testRunner.Given("person with CognitoId \'100\' and NewMemberId \'300\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table141 = new TechTalk.SpecFlow.Table(new string[] {
                            "CognitoId",
                            "MerchantId",
                            "hyphenatedString"});
                table141.AddRow(new string[] {
                            "100",
                            "3",
                            "merch-3"});
                table141.AddRow(new string[] {
                            "100",
                            "4",
                            "merch-4"});
                table141.AddRow(new string[] {
                            "100",
                            "5",
                            "merch-5"});
                table141.AddRow(new string[] {
                            "100",
                            "6",
                            "merch-6"});
                table141.AddRow(new string[] {
                            "100",
                            "7",
                            "merch-7"});
                table141.AddRow(new string[] {
                            "100",
                            "8",
                            "merch-8"});
                table141.AddRow(new string[] {
                            "100",
                            "9",
                            "merch-9"});
                table141.AddRow(new string[] {
                            "100",
                            "10",
                            "merch-10"});
#line 79
 testRunner.Given("person has selected favourites", ((string)(null)), table141, "Given ");
#line hidden
#line 89
 testRunner.Given("person with CognitoId \'100\' is enroled in experiment \'Exp1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 90
 testRunner.Given("the offer sync job has run", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 91
 testRunner.When("I send an EDM offer query with NewMemberId \'300\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table142 = new TechTalk.SpecFlow.Table(new string[] {
                            "Title"});
                table142.AddRow(new string[] {
                            "Offer-8"});
                table142.AddRow(new string[] {
                            "Offer-9"});
                table142.AddRow(new string[] {
                            "Offer-1"});
                table142.AddRow(new string[] {
                            "Offer-2"});
                table142.AddRow(new string[] {
                            "Offer-3"});
                table142.AddRow(new string[] {
                            "Offer-4"});
                table142.AddRow(new string[] {
                            "Offer-5"});
                table142.AddRow(new string[] {
                            "Offer-6"});
                table142.AddRow(new string[] {
                            "Offer-7"});
                table142.AddRow(new string[] {
                            "Offer-10"});
#line 92
 testRunner.Then("I should receive EDM offers in the correct order", ((string)(null)), table142, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Order offers by experiment 2 - top 2 favourites by soonest offer ending date")]
        public void OrderOffersByExperiment2_Top2FavouritesBySoonestOfferEndingDate()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Order offers by experiment 2 - top 2 favourites by soonest offer ending date", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 107
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table143 = new TechTalk.SpecFlow.Table(new string[] {
                            "FeatureToggleName"});
                table143.AddRow(new string[] {
                            "Exp2"});
                table143.AddRow(new string[] {
                            "EnrolExp2"});
#line 108
 testRunner.Given("Unleash feature toggles", ((string)(null)), table143, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table144 = new TechTalk.SpecFlow.Table(new string[] {
                            "MerchantId",
                            "Title",
                            "Ranking",
                            "EndDateTime"});
                table144.AddRow(new string[] {
                            "1",
                            "Offer-1",
                            "10",
                            "7/01/2022 11:59:59 PM"});
                table144.AddRow(new string[] {
                            "2",
                            "Offer-2",
                            "9",
                            "6/01/2022 11:59:59 PM"});
                table144.AddRow(new string[] {
                            "3",
                            "Offer-3",
                            "8",
                            "5/01/2022 11:59:59 PM"});
                table144.AddRow(new string[] {
                            "4",
                            "Offer-4",
                            "7",
                            "4/01/2022 11:59:59 PM"});
                table144.AddRow(new string[] {
                            "5",
                            "Offer-5",
                            "6",
                            "3/01/2022 11:59:59 PM"});
                table144.AddRow(new string[] {
                            "6",
                            "Offer-6",
                            "5",
                            "2/01/2022 11:59:59 PM"});
                table144.AddRow(new string[] {
                            "7",
                            "Offer-7",
                            "4",
                            "1/01/2022 11:59:59 PM"});
#line 112
 testRunner.Given("offers exist in the ShopGo database", ((string)(null)), table144, "Given ");
#line hidden
#line 121
 testRunner.Given("person with CognitoId \'100\' and NewMemberId \'300\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table145 = new TechTalk.SpecFlow.Table(new string[] {
                            "CognitoId",
                            "MerchantId",
                            "hyphenatedString"});
                table145.AddRow(new string[] {
                            "100",
                            "3",
                            "merch-3"});
                table145.AddRow(new string[] {
                            "100",
                            "4",
                            "merch-4"});
                table145.AddRow(new string[] {
                            "100",
                            "5",
                            "merch-5"});
                table145.AddRow(new string[] {
                            "100",
                            "6",
                            "merch-6"});
#line 122
 testRunner.Given("person has selected favourites", ((string)(null)), table145, "Given ");
#line hidden
#line 128
 testRunner.Given("person with CognitoId \'100\' is enroled in experiment \'Exp2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 129
 testRunner.Given("the offer sync job has run", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 130
 testRunner.When("I send an EDM offer query with NewMemberId \'300\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table146 = new TechTalk.SpecFlow.Table(new string[] {
                            "Title"});
                table146.AddRow(new string[] {
                            "Offer-6"});
                table146.AddRow(new string[] {
                            "Offer-5"});
                table146.AddRow(new string[] {
                            "Offer-1"});
                table146.AddRow(new string[] {
                            "Offer-2"});
                table146.AddRow(new string[] {
                            "Offer-3"});
                table146.AddRow(new string[] {
                            "Offer-4"});
                table146.AddRow(new string[] {
                            "Offer-7"});
#line 131
 testRunner.Then("I should receive EDM offers in the correct order", ((string)(null)), table146, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Order offers by experiment 3 - top 2 favourites by selection order")]
        public void OrderOffersByExperiment3_Top2FavouritesBySelectionOrder()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Order offers by experiment 3 - top 2 favourites by selection order", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 143
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table147 = new TechTalk.SpecFlow.Table(new string[] {
                            "FeatureToggleName"});
                table147.AddRow(new string[] {
                            "Exp3"});
                table147.AddRow(new string[] {
                            "EnrolExp3"});
#line 144
 testRunner.Given("Unleash feature toggles", ((string)(null)), table147, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table148 = new TechTalk.SpecFlow.Table(new string[] {
                            "MerchantId",
                            "Title",
                            "Ranking"});
                table148.AddRow(new string[] {
                            "1",
                            "Offer-1",
                            "10"});
                table148.AddRow(new string[] {
                            "2",
                            "Offer-2",
                            "9"});
                table148.AddRow(new string[] {
                            "3",
                            "Offer-3",
                            "8"});
                table148.AddRow(new string[] {
                            "4",
                            "Offer-4",
                            "7"});
                table148.AddRow(new string[] {
                            "5",
                            "Offer-5",
                            "6"});
                table148.AddRow(new string[] {
                            "6",
                            "Offer-6",
                            "5"});
                table148.AddRow(new string[] {
                            "7",
                            "Offer-7",
                            "4"});
#line 148
 testRunner.Given("offers exist in the ShopGo database", ((string)(null)), table148, "Given ");
#line hidden
#line 157
 testRunner.Given("person with CognitoId \'100\' and NewMemberId \'300\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table149 = new TechTalk.SpecFlow.Table(new string[] {
                            "CognitoId",
                            "MerchantId",
                            "hyphenatedString",
                            "SelectionOrder"});
                table149.AddRow(new string[] {
                            "100",
                            "3",
                            "merch-3",
                            "3"});
                table149.AddRow(new string[] {
                            "100",
                            "4",
                            "merch-4",
                            "0"});
                table149.AddRow(new string[] {
                            "100",
                            "5",
                            "merch-5",
                            "2"});
                table149.AddRow(new string[] {
                            "100",
                            "6",
                            "merch-6",
                            "1"});
#line 158
 testRunner.Given("person has selected favourites", ((string)(null)), table149, "Given ");
#line hidden
#line 164
 testRunner.Given("person with CognitoId \'100\' is enroled in experiment \'Exp3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 165
 testRunner.Given("the offer sync job has run", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 166
 testRunner.When("I send an EDM offer query with NewMemberId \'300\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table150 = new TechTalk.SpecFlow.Table(new string[] {
                            "Title"});
                table150.AddRow(new string[] {
                            "Offer-4"});
                table150.AddRow(new string[] {
                            "Offer-6"});
                table150.AddRow(new string[] {
                            "Offer-1"});
                table150.AddRow(new string[] {
                            "Offer-2"});
                table150.AddRow(new string[] {
                            "Offer-3"});
                table150.AddRow(new string[] {
                            "Offer-5"});
                table150.AddRow(new string[] {
                            "Offer-7"});
#line 167
 testRunner.Then("I should receive EDM offers in the correct order", ((string)(null)), table150, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Exclude offers already contained in EDM campigns")]
        public void ExcludeOffersAlreadyContainedInEDMCampigns()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Exclude offers already contained in EDM campigns", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 179
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table151 = new TechTalk.SpecFlow.Table(new string[] {
                            "OfferId",
                            "Title",
                            "Ranking"});
                table151.AddRow(new string[] {
                            "201",
                            "Offer-201",
                            "1"});
                table151.AddRow(new string[] {
                            "202",
                            "Offer-202",
                            "2"});
                table151.AddRow(new string[] {
                            "203",
                            "Offer-203",
                            "3"});
                table151.AddRow(new string[] {
                            "204",
                            "Offer-204",
                            "4"});
                table151.AddRow(new string[] {
                            "205",
                            "Offer-205",
                            "5"});
#line 180
 testRunner.Given("offers exist in the ShopGo database", ((string)(null)), table151, "Given ");
#line hidden
#line 187
 testRunner.Given("Offer with OfferId \'203\' is in EDM campaign with CampaignId \'101\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 188
 testRunner.Given("the offer sync job has run", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 189
 testRunner.When("I send an EDM offer query with EDM campaignId \'101\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table152 = new TechTalk.SpecFlow.Table(new string[] {
                            "Title"});
                table152.AddRow(new string[] {
                            "Offer-205"});
                table152.AddRow(new string[] {
                            "Offer-204"});
                table152.AddRow(new string[] {
                            "Offer-202"});
                table152.AddRow(new string[] {
                            "Offer-201"});
#line 190
 testRunner.Then("I should receive EDM offers in the correct order", ((string)(null)), table152, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
